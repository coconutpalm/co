Elm.Editor = Elm.Editor || {};
Elm.Editor.make = function (_elm) {
   "use strict";
   _elm.Editor = _elm.Editor || {};
   if (_elm.Editor.values)
   return _elm.Editor.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Editor",
   $Basics = Elm.Basics.make(_elm),
   $Graph = Elm.Graph.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Woot = Elm.Woot.make(_elm);
   var sendDebug = F2(function (model,
   str) {
      return {ctor: "_Tuple2"
             ,_0: _U.replace([["debug"
                              ,A2($Basics._op["++"],
                              str,
                              model.debug)]],
             model)
             ,_1: $Model.W($Model.NoUpdate)};
   });
   var createInsertTUpdate = F2(function (_v0,
   tUpdates) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return A2($List._op["::"],
              A2($Model.I,_v0._0,_v0._1),
              tUpdates);}
         _U.badCase($moduleName,
         "on line 101, column 46 to 70");
      }();
   });
   var toEditList = function (_v4) {
      return function () {
         switch (_v4.ctor)
         {case "_Tuple2":
            return {ctor: "_Tuple2"
                   ,_0: _v4._0
                   ,_1: _L.fromArray([_v4._1])};}
         _U.badCase($moduleName,
         "on line 98, column 29 to 42");
      }();
   };
   var processTUpdate = F2(function (typ,
   model) {
      return function () {
         switch (typ.ctor)
         {case "D":
            return toEditList(A3($Graph.generateDelete,
              typ._0,
              typ._1,
              model));
            case "I":
            return toEditList(A3($Graph.generateInsert,
              typ._0,
              typ._1,
              model));
            case "IS":
            return A3(insertString,
              typ._0,
              typ._1,
              model);}
         _U.badCase($moduleName,
         "between lines 73 and 76");
      }();
   });
   var insertString = F3(function (string,
   index,
   model) {
      return function () {
         var strIndexList = A3($List.map2,
         F2(function (v0,v1) {
            return {ctor: "_Tuple2"
                   ,_0: v0
                   ,_1: v1};
         }),
         $String.toList(string),
         _L.range(index,
         index + $String.length(string)));
         var tUpdates = A3($List.foldr,
         createInsertTUpdate,
         _L.fromArray([]),
         strIndexList);
         return A3($List.foldr,
         insertCharOfString,
         {ctor: "_Tuple2"
         ,_0: model
         ,_1: _L.fromArray([])},
         tUpdates);
      }();
   });
   var insertCharOfString = F2(function (tUpdate,
   _v15) {
      return function () {
         switch (_v15.ctor)
         {case "_Tuple2":
            return function () {
                 var $ = A2(processTUpdate,
                 tUpdate,
                 _v15._0),
                 newModel = $._0,
                 newEdits = $._1;
                 return {ctor: "_Tuple2"
                        ,_0: newModel
                        ,_1: A2($Basics._op["++"],
                        newEdits,
                        _v15._1)};
              }();}
         _U.badCase($moduleName,
         "between lines 92 and 95");
      }();
   });
   var processServerUpdate = F2(function (wUpd,
   model) {
      return function () {
         var poolUpdate = {ctor: "_Tuple2"
                          ,_0: _U.replace([["pool"
                                           ,A2($List._op["::"],
                                           wUpd,
                                           model.pool)]],
                          model)
                          ,_1: _L.fromArray([])};
         return function () {
            switch (wUpd.ctor)
            {case "Delete":
               return A2($Woot.canIntegrate,
                 wUpd,
                 model.wSeen) ? toEditList(A2($Graph.integrateRemoteDelete,
                 wUpd._0,
                 model)) : poolUpdate;
               case "Insert":
               return A2($Woot.canIntegrate,
                 wUpd,
                 model.wSeen) ? toEditList(A2($Graph.integrateRemoteInsert,
                 wUpd._0,
                 model)) : poolUpdate;
               case "NoUpdate":
               return {ctor: "_Tuple2"
                      ,_0: model
                      ,_1: _L.fromArray([])};
               case "SiteId":
               return {ctor: "_Tuple2"
                      ,_0: _U.replace([["site"
                                       ,wUpd._0]],
                      model)
                      ,_1: _L.fromArray([])};}
            _U.badCase($moduleName,
            "between lines 55 and 66");
         }();
      }();
   });
   var processEdit = F2(function (edit,
   model) {
      return function () {
         switch (edit.ctor)
         {case "T":
            return A2(processTUpdate,
              edit._0,
              model);
            case "W":
            return A2(processServerUpdate,
              edit._0,
              model);}
         _U.badCase($moduleName,
         "between lines 46 and 48");
      }();
   });
   var processEdits = F2(function (edits,
   model) {
      return function () {
         var _v26 = $List.head(edits);
         switch (_v26.ctor)
         {case "Just":
            return A2(processEdit,
              _v26._0,
              model);}
         return {ctor: "_Tuple2"
                ,_0: model
                ,_1: _L.fromArray([])};
      }();
   });
   var integrateRemoteUpdate = F2(function (wUpd,
   m) {
      return function () {
         var moveToProcessed = F2(function (x,
         m) {
            return {ctor: "_Tuple2"
                   ,_0: _U.replace([["processedPool"
                                    ,A2($List._op["::"],
                                    x,
                                    m.processedPool)]],
                   m)
                   ,_1: _L.fromArray([])};
         });
         return function () {
            switch (wUpd.ctor)
            {case "Delete":
               return A2($Woot.canIntegrate,
                 wUpd,
                 m.wSeen) ? toEditList(A2($Graph.integrateRemoteDelete,
                 wUpd._0,
                 m)) : A2(moveToProcessed,
                 wUpd,
                 m);
               case "Insert":
               return A2($Woot.canIntegrate,
                 wUpd,
                 m.wSeen) ? toEditList(A2($Graph.integrateRemoteInsert,
                 wUpd._0,
                 m)) : A2(moveToProcessed,
                 wUpd,
                 m);}
            _U.badCase($moduleName,
            "between lines 14 and 21");
         }();
      }();
   });
   var integratePool = function (model) {
      return function () {
         var _v31 = model.pool;
         switch (_v31.ctor)
         {case "::":
            return A2($Woot.canIntegrate,
              _v31._0,
              model.wSeen) ? A2(integrateRemoteUpdate,
              _v31._0,
              _U.replace([["pool"
                          ,A2($List._op["::"],
                          _v31._0,
                          model.processedPool)]
                         ,["processedPool"
                          ,_L.fromArray([])]],
              model)) : integratePool(_U.replace([["pool"
                                                  ,_v31._1]
                                                 ,["processedPool"
                                                  ,A2($List._op["::"],
                                                  _v31._0,
                                                  model.processedPool)]],
              model));
            case "[]":
            return {ctor: "_Tuple2"
                   ,_0: _U.replace([["pool"
                                    ,model.processedPool]
                                   ,["processedPool"
                                    ,_L.fromArray([])]],
                   model)
                   ,_1: _L.fromArray([])};}
         _U.badCase($moduleName,
         "between lines 26 and 35");
      }();
   };
   _elm.Editor.values = {_op: _op
                        ,integrateRemoteUpdate: integrateRemoteUpdate
                        ,integratePool: integratePool
                        ,processEdits: processEdits
                        ,processEdit: processEdit
                        ,processServerUpdate: processServerUpdate
                        ,processTUpdate: processTUpdate
                        ,insertString: insertString
                        ,insertCharOfString: insertCharOfString
                        ,toEditList: toEditList
                        ,createInsertTUpdate: createInsertTUpdate
                        ,sendDebug: sendDebug};
   return _elm.Editor.values;
};