Elm.Graph = Elm.Graph || {};
Elm.Graph.make = function (_elm) {
   "use strict";
   _elm.Graph = _elm.Graph || {};
   if (_elm.Graph.values)
   return _elm.Graph.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Graph",
   $Basics = Elm.Basics.make(_elm),
   $Constants = Elm.Constants.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Woot = Elm.Woot.make(_elm);
   var updateStrAndLen = F3(function (doc,
   str,
   len) {
      return _U.replace([["str"
                         ,str]
                        ,["len",len]],
      doc);
   });
   var updateCP = F2(function (doc,
   cp) {
      return _U.replace([["cp"
                         ,cp]],
      doc);
   });
   var integrateDelete = F2(function (wChar,
   model) {
      return function () {
         var newWString = A2($Woot.setInvisible,
         model.wString,
         wChar.id);
         var newStr = $Woot.wToString(newWString);
         var newLen = $String.length(newStr);
         return _U.replace([["wString"
                            ,newWString]],
         model);
      }();
   });
   var integrateRemoteDelete = F2(function (wChar,
   model) {
      return function () {
         var deletePos = A2($Woot.pos,
         model.wString,
         wChar);
         var currCP = model.doc.cp;
         var newCP = _U.cmp(currCP,
         deletePos) > 0 ? currCP - 1 : currCP;
         var newDocModel = _U.replace([["doc"
                                       ,A2(updateCP,model.doc,newCP)]
                                      ,["debug"
                                       ,A2($Basics._op["++"],
                                       "deleting",
                                       A2($Basics._op["++"],
                                       $String.fromChar(wChar.ch),
                                       A2($Basics._op["++"],
                                       " at ",
                                       $Basics.toString(deletePos))))]],
         model);
         var newModel = A2(integrateDelete,
         wChar,
         newDocModel);
         return {ctor: "_Tuple2"
                ,_0: newModel
                ,_1: $Model.T(A2($Model.D,
                wChar.ch,
                deletePos))};
      }();
   });
   var generateDelete = F3(function (ch,
   place,
   model) {
      return function () {
         var currWChar = A2($Woot.ithVisible,
         model.wString,
         place);
         var deletedWChar = _U.replace([["vis"
                                        ,-1]],
         currWChar);
         var successor = A2($Woot.ithVisible,
         model.wString,
         place + 1);
         var predecessor = A2($Woot.ithVisible,
         model.wString,
         place - 1);
         var newModel = _U.replace([["doc"
                                    ,A2(updateCP,model.doc,place)]
                                   ,["debug"
                                    ,A2($Basics._op["++"],
                                    "CHAR deleteing is -- ",
                                    A2($Basics._op["++"],
                                    $String.fromChar(ch),
                                    A2($Basics._op["++"],
                                    "    DELETING: ",
                                    A2($Basics._op["++"],
                                    $String.fromChar(currWChar.ch),
                                    A2($Basics._op["++"],
                                    "/thisIndex: ",
                                    A2($Basics._op["++"],
                                    $Basics.toString(place),
                                    A2($Basics._op["++"],
                                    "/pred :",
                                    A2($Basics._op["++"],
                                    $String.fromChar(predecessor.ch),
                                    A2($Basics._op["++"],
                                    "/succ: ",
                                    A2($Basics._op["++"],
                                    $String.fromChar(successor.ch),
                                    A2($Basics._op["++"],
                                    "/place: ",
                                    $Basics.toString(place))))))))))))]],
         model);
         return {ctor: "_Tuple2"
                ,_0: A2(integrateDelete,
                deletedWChar,
                newModel)
                ,_1: $Model.W($Model.Delete(deletedWChar))};
      }();
   });
   var findLaterWChar = F2(function (insCh,
   wStr) {
      return function () {
         switch (wStr.ctor)
         {case "::":
            switch (wStr._1.ctor)
              {case "::":
                 switch (wStr._1._1.ctor)
                   {case "[]":
                      return {ctor: "_Tuple2"
                             ,_0: wStr._0
                             ,_1: wStr._1._0};}
                   break;
                 case "[]":
                 return {ctor: "_Tuple2"
                        ,_0: $Constants.startChar
                        ,_1: $Constants.endChar};}
              return A2(findLaterWChar,
              insCh,
              wStr._1);
            case "[]":
            return {ctor: "_Tuple2"
                   ,_0: $Constants.startChar
                   ,_1: $Constants.endChar};}
         _U.badCase($moduleName,
         "between lines 122 and 128");
      }();
   });
   var withoutPrecedenceOrdered = function (wStr) {
      return function () {
         var nextAbsent = function (wC) {
            return $Basics.not(A2($List.any,
            function (x) {
               return _U.eq(x.id,wC.next);
            },
            wStr));
         };
         var prevAbsent = function (wC) {
            return $Basics.not(A2($List.any,
            function (x) {
               return _U.eq(x.id,wC.prev);
            },
            wStr));
         };
         var prevAndNextAbsent = function (wC) {
            return prevAbsent(wC) && nextAbsent(wC);
         };
         return A2($List.filter,
         prevAndNextAbsent,
         wStr);
      }();
   };
   var insertIntoList = F3(function (wCh,
   wStr,
   pos) {
      return function () {
         switch (wStr.ctor)
         {case "::": return _U.eq(pos,
              0) ? A2($List._op["::"],
              wCh,
              A2($List._op["::"],
              wStr._0,
              wStr._1)) : A2($List._op["::"],
              wStr._0,
              A3(insertIntoList,
              wCh,
              wStr._1,
              pos - 1));
            case "[]":
            return _L.fromArray([wCh]);}
         _U.badCase($moduleName,
         "between lines 50 and 54");
      }();
   });
   var intInsertChar = F3(function (wCh,
   pos,
   model) {
      return function () {
         var newWStr = A3(insertIntoList,
         wCh,
         model.wString,
         pos);
         var newStr = $Woot.wToString(newWStr);
         var newLen = $String.length(newStr);
         return _U.replace([["wString"
                            ,newWStr]
                           ,["wSeen"
                            ,A2($Set.insert,
                            wCh.id,
                            model.wSeen)]
                           ,["doc"
                            ,A3(updateStrAndLen,
                            model.doc,
                            newStr,
                            newLen)]],
         model);
      }();
   });
   var integrateInsert$ = F5(function (wCh,
   pred,
   succ,
   pos,
   model) {
      return function () {
         var subStr = A3($Woot.subSeq,
         model.wString,
         pred,
         succ);
         var idOrderSubStr = A2($List._op["::"],
         pred,
         A2($Basics._op["++"],
         withoutPrecedenceOrdered(subStr),
         _L.fromArray([succ])));
         var $ = A2(findLaterWChar,
         wCh,
         idOrderSubStr),
         newPred = $._0,
         newSucc = $._1;
         return function () {
            switch (subStr.ctor)
            {case "::":
               return A5(integrateInsert$,
                 wCh,
                 newPred,
                 newSucc,
                 pos,
                 model);
               case "[]":
               return A3(intInsertChar,
                 wCh,
                 pos,
                 model);}
            _U.badCase($moduleName,
            "between lines 80 and 82");
         }();
      }();
   });
   var generateInsChar = F4(function ($char,
   predIndex,
   nextIndex,
   model) {
      return function () {
         var newModel = _U.replace([["counter"
                                    ,model.counter + 1]],
         model);
         var newId = {ctor: "_Tuple2"
                     ,_0: model.site
                     ,_1: model.counter};
         var succ = A2($Woot.ithVisible,
         model.wString,
         nextIndex);
         var pred = A2($Woot.ithVisible,
         model.wString,
         predIndex);
         var newWChar = {_: {}
                        ,ch: $char
                        ,id: newId
                        ,next: succ.id
                        ,prev: pred.id
                        ,vis: 1};
         var debugModel = _U.replace([["debug"
                                      ,A2($Basics._op["++"],
                                      "newWchar",
                                      A2($Basics._op["++"],
                                      $Basics.toString(newWChar),
                                      A2($Basics._op["++"],
                                      "   pred",
                                      A2($Basics._op["++"],
                                      $Basics.toString(pred),
                                      A2($Basics._op["++"],
                                      "succ    ",
                                      A2($Basics._op["++"],
                                      $Basics.toString(succ),
                                      A2($Basics._op["++"],
                                      "   pred index:   ",
                                      A2($Basics._op["++"],
                                      $Basics.toString(predIndex),
                                      A2($Basics._op["++"],
                                      "    next Index   ",
                                      $Basics.toString(nextIndex))))))))))]],
         newModel);
         return {ctor: "_Tuple2"
                ,_0: A5(integrateInsert$,
                newWChar,
                pred,
                succ,
                nextIndex,
                debugModel)
                ,_1: $Model.W($Model.Insert(newWChar))};
      }();
   });
   var integrateRemoteInsert = F2(function (wChar,
   model) {
      return function () {
         var currCP = model.doc.cp;
         var wNext = A2($Woot.grabNext,
         wChar,
         model.wString);
         var insertPos = A2($Woot.pos,
         model.wString,
         wNext);
         var newCP = _U.cmp(currCP,
         insertPos) > 0 ? currCP + 1 : currCP;
         var newCPModel = _U.replace([["doc"
                                      ,A2(updateCP,model.doc,newCP)]],
         model);
         var wPrev = A2($Woot.grabPrev,
         wChar,
         model.wString);
         var newModel = A5(integrateInsert$,
         wChar,
         wPrev,
         wNext,
         insertPos,
         newCPModel);
         return {ctor: "_Tuple2"
                ,_0: newModel
                ,_1: $Model.T(A2($Model.I,
                wChar.ch,
                insertPos))};
      }();
   });
   var generateInsert = F3(function (ch,
   place,
   model) {
      return function () {
         var debugModel = _U.replace([["debug"
                                      ,A2($Basics._op["++"],
                                      "ch is  ",
                                      A2($Basics._op["++"],
                                      $String.fromChar(ch),
                                      A2($Basics._op["++"],
                                      "   place is   ",
                                      $Basics.toString(place))))]],
         model);
         return A4(generateInsChar,
         ch,
         place - 2,
         place - 1,
         _U.replace([["doc"
                     ,A2(updateCP,model.doc,place)]],
         debugModel));
      }();
   });
   _elm.Graph.values = {_op: _op
                       ,generateInsert: generateInsert
                       ,integrateRemoteInsert: integrateRemoteInsert
                       ,insertIntoList: insertIntoList
                       ,intInsertChar: intInsertChar
                       ,integrateInsert$: integrateInsert$
                       ,generateInsChar: generateInsChar
                       ,withoutPrecedenceOrdered: withoutPrecedenceOrdered
                       ,findLaterWChar: findLaterWChar
                       ,generateDelete: generateDelete
                       ,integrateRemoteDelete: integrateRemoteDelete
                       ,integrateDelete: integrateDelete
                       ,updateCP: updateCP
                       ,updateStrAndLen: updateStrAndLen};
   return _elm.Graph.values;
};