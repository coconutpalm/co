Elm.ConvertJson = Elm.ConvertJson || {};
Elm.ConvertJson.make = function (_elm) {
   "use strict";
   _elm.ConvertJson = _elm.ConvertJson || {};
   if (_elm.ConvertJson.values)
   return _elm.ConvertJson.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "ConvertJson",
   $Basics = Elm.Basics.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var tUpToJsonList = F2(function (ch,
   index) {
      return _L.fromArray([{ctor: "_Tuple2"
                           ,_0: "ch"
                           ,_1: $Json$Encode.string($String.fromChar(ch))}
                          ,{ctor: "_Tuple2"
                           ,_0: "index"
                           ,_1: $Json$Encode.$int(index)}]);
   });
   var encodeTUpdate = function (tUp) {
      return function () {
         switch (tUp.ctor)
         {case "D":
            return $Json$Encode.object(A2($List._op["::"],
              {ctor: "_Tuple2"
              ,_0: "type"
              ,_1: $Json$Encode.string("typingDelete")},
              A2(tUpToJsonList,
              tUp._0,
              tUp._1)));
            case "I":
            return $Json$Encode.object(A2($List._op["::"],
              {ctor: "_Tuple2"
              ,_0: "type"
              ,_1: $Json$Encode.string("typingInsert")},
              A2(tUpToJsonList,
              tUp._0,
              tUp._1)));}
         return $Json$Encode.object(_L.fromArray([{ctor: "_Tuple2"
                                                  ,_0: "type"
                                                  ,_1: $Json$Encode.string("typingNoUpdate")}]));
      }();
   };
   var wCharToJsonList = function (wCh) {
      return _L.fromArray([{ctor: "_Tuple2"
                           ,_0: "id"
                           ,_1: $Json$Encode.list(_L.fromArray([$Json$Encode.$int($Basics.fst(wCh.id))
                                                               ,$Json$Encode.$int($Basics.snd(wCh.id))]))}
                          ,{ctor: "_Tuple2"
                           ,_0: "prev"
                           ,_1: $Json$Encode.list(_L.fromArray([$Json$Encode.$int($Basics.fst(wCh.prev))
                                                               ,$Json$Encode.$int($Basics.snd(wCh.prev))]))}
                          ,{ctor: "_Tuple2"
                           ,_0: "next"
                           ,_1: $Json$Encode.list(_L.fromArray([$Json$Encode.$int($Basics.fst(wCh.next))
                                                               ,$Json$Encode.$int($Basics.snd(wCh.next))]))}
                          ,{ctor: "_Tuple2"
                           ,_0: "vis"
                           ,_1: $Json$Encode.$int(wCh.vis)}
                          ,{ctor: "_Tuple2"
                           ,_0: "ch"
                           ,_1: $Json$Encode.string($String.fromChar(wCh.ch))}]);
   };
   var encodeWUpdate = function (wUp) {
      return function () {
         switch (wUp.ctor)
         {case "Delete":
            return $Json$Encode.object(A2($List._op["::"],
              {ctor: "_Tuple2"
              ,_0: "type"
              ,_1: $Json$Encode.string("Delete")},
              wCharToJsonList(wUp._0)));
            case "Insert":
            return $Json$Encode.object(A2($List._op["::"],
              {ctor: "_Tuple2"
              ,_0: "type"
              ,_1: $Json$Encode.string("Insert")},
              wCharToJsonList(wUp._0)));
            case "NoUpdate":
            return $Json$Encode.object(_L.fromArray([{ctor: "_Tuple2"
                                                     ,_0: "type"
                                                     ,_1: $Json$Encode.string("NoUpdatelol")}]));}
         _U.badCase($moduleName,
         "between lines 239 and 242");
      }();
   };
   var encodeStringUpdate = function (str) {
      return $Json$Encode.object(_L.fromArray([{ctor: "_Tuple2"
                                               ,_0: "type"
                                               ,_1: $Json$Encode.string("StringUpdate")}
                                              ,{ctor: "_Tuple2"
                                               ,_0: "string"
                                               ,_1: $Json$Encode.string(str)}]));
   };
   var encodeWInsert = function (wCh) {
      return $Json$Encode.object(_L.fromArray([{ctor: "_Tuple2"
                                               ,_0: "id"
                                               ,_1: $Json$Encode.string(wCh.id)}
                                              ,{ctor: "_Tuple2"
                                               ,_0: "ch"
                                               ,_1: $Json$Encode.string($String.fromChar(wCh.ch))}
                                              ,{ctor: "_Tuple2"
                                               ,_0: "next"
                                               ,_1: $Json$Encode.string(wCh.next)}
                                              ,{ctor: "_Tuple2"
                                               ,_0: "prev"
                                               ,_1: $Json$Encode.string(wCh.prev)}
                                              ,{ctor: "_Tuple2"
                                               ,_0: "vis"
                                               ,_1: $Json$Encode.$int(wCh.vis)}]));
   };
   var stringUpdateToJson = function (str) {
      return function () {
         var strValue = encodeStringUpdate(str);
         return A2($Json$Encode.encode,
         2,
         strValue);
      }();
   };
   var wUpdateToJson = function (wUpdate) {
      return function () {
         var wUpValue = encodeWUpdate(wUpdate);
         return A2($Json$Encode.encode,
         2,
         wUpValue);
      }();
   };
   var wUpdatesToJson = function (wUpdates) {
      return function () {
         var wUpdateListValue = $Json$Encode.list(A2($List.map,
         encodeWUpdate,
         wUpdates));
         return A2($Json$Encode.encode,
         2,
         wUpdateListValue);
      }();
   };
   var tUpdateToJson = function (tUpd) {
      return function () {
         var tUpValue = encodeTUpdate(tUpd);
         return A2($Json$Encode.encode,
         2,
         tUpValue);
      }();
   };
   var tUpdatesToJson = function (tUpdates) {
      return function () {
         var tUpdateListValue = $Json$Encode.list(A2($List.map,
         encodeTUpdate,
         tUpdates));
         return A2($Json$Encode.encode,
         2,
         tUpdateListValue);
      }();
   };
   var wSiteIdDecoder = A2($Json$Decode._op[":="],
   "siteId",
   $Json$Decode.$int);
   var decodeWSiteId = function (str) {
      return function () {
         var _v8 = A2($Json$Decode.decodeString,
         wSiteIdDecoder,
         str);
         switch (_v8.ctor)
         {case "Err":
            return $Model.NoUpdate;
            case "Ok":
            return $Model.SiteId(_v8._0);}
         _U.badCase($moduleName,
         "between lines 169 and 171");
      }();
   };
   var decCP = A2($Json$Decode._op[":="],
   "cp",
   $Json$Decode.$int);
   var tDeleteStringDecoder = A3($Json$Decode.object2,
   F2(function (str,cp) {
      return A2($Model.DS,str,cp);
   }),
   A2($Json$Decode._op[":="],
   "str",
   $Json$Decode.string),
   decCP);
   var tInsertStringDecoder = A3($Json$Decode.object2,
   F2(function (str,cp) {
      return A2($Model.IS,str,cp);
   }),
   A2($Json$Decode._op[":="],
   "str",
   $Json$Decode.string),
   decCP);
   var toChar = function (str) {
      return function () {
         var _v11 = $List.head($String.toList(str));
         switch (_v11.ctor)
         {case "Just": return _v11._0;}
         return _U.chr("$");
      }();
   };
   var tDeleteDecoder = A3($Json$Decode.object2,
   F2(function (ch,cp) {
      return A2($Model.D,
      toChar(ch),
      cp);
   }),
   A2($Json$Decode._op[":="],
   "ch",
   $Json$Decode.string),
   A2($Json$Decode._op[":="],
   "cp",
   $Json$Decode.$int));
   var decCh = A2($Json$Decode._op[":="],
   "ch",
   $Json$Decode.string);
   var tInsertDecoder = A3($Json$Decode.object2,
   F2(function (ch,cp) {
      return A2($Model.I,
      toChar(ch),
      cp);
   }),
   decCh,
   decCP);
   var decodeTUpdate = F2(function (typeStr,
   str) {
      return _U.eq(typeStr,
      "Insert") ? function () {
         var _v13 = A2($Json$Decode.decodeString,
         tInsertDecoder,
         str);
         switch (_v13.ctor)
         {case "Err":
            return $Model.NoTUpdate;
            case "Ok": return _v13._0;}
         _U.badCase($moduleName,
         "between lines 98 and 101");
      }() : _U.eq(typeStr,
      "Delete") ? function () {
         var _v16 = A2($Json$Decode.decodeString,
         tDeleteDecoder,
         str);
         switch (_v16.ctor)
         {case "Err":
            return $Model.NoTUpdate;
            case "Ok": return _v16._0;}
         _U.badCase($moduleName,
         "between lines 102 and 105");
      }() : _U.eq(typeStr,
      "InsertString") ? function () {
         var _v19 = A2($Json$Decode.decodeString,
         tInsertStringDecoder,
         str);
         switch (_v19.ctor)
         {case "Err":
            return $Model.NoTUpdate;
            case "Ok": return _v19._0;}
         _U.badCase($moduleName,
         "between lines 106 and 109");
      }() : _U.eq(typeStr,
      "DeleteString") ? function () {
         var _v22 = A2($Json$Decode.decodeString,
         tDeleteStringDecoder,
         str);
         switch (_v22.ctor)
         {case "Err":
            return $Model.NoTUpdate;
            case "Ok": return _v22._0;}
         _U.badCase($moduleName,
         "between lines 110 and 112");
      }() : _U.badIf($moduleName,
      "between lines 96 and 112");
   });
   var decPrev = A2($Json$Decode._op[":="],
   "prev",
   A3($Json$Decode.tuple2,
   F2(function (v0,v1) {
      return {ctor: "_Tuple2"
             ,_0: v0
             ,_1: v1};
   }),
   $Json$Decode.$int,
   $Json$Decode.$int));
   var decNext = A2($Json$Decode._op[":="],
   "next",
   A3($Json$Decode.tuple2,
   F2(function (v0,v1) {
      return {ctor: "_Tuple2"
             ,_0: v0
             ,_1: v1};
   }),
   $Json$Decode.$int,
   $Json$Decode.$int));
   var decVis = A2($Json$Decode._op[":="],
   "vis",
   $Json$Decode.$int);
   var decodeId = A2($Json$Decode._op[":="],
   "id",
   A3($Json$Decode.tuple2,
   F2(function (v0,v1) {
      return {ctor: "_Tuple2"
             ,_0: v0
             ,_1: v1};
   }),
   $Json$Decode.$int,
   $Json$Decode.$int));
   var wCharDecoder = A6($Json$Decode.object5,
   F5(function (id,
   next,
   prev,
   vis,
   chr) {
      return A5($Model.WChar,
      id,
      next,
      prev,
      vis,
      toChar(chr));
   }),
   decodeId,
   decNext,
   decPrev,
   decVis,
   decCh);
   var decodeWInsert = function (str) {
      return function () {
         var _v25 = A2($Json$Decode.decodeString,
         wCharDecoder,
         str);
         switch (_v25.ctor)
         {case "Err":
            return $Model.NoUpdate;
            case "Ok":
            return $Model.Insert(_v25._0);}
         _U.badCase($moduleName,
         "between lines 154 and 156");
      }();
   };
   var decodeWDelete = function (str) {
      return function () {
         var _v28 = A2($Json$Decode.decodeString,
         wCharDecoder,
         str);
         switch (_v28.ctor)
         {case "Err":
            return $Model.NoUpdate;
            case "Ok":
            return $Model.Delete(_v28._0);}
         _U.badCase($moduleName,
         "between lines 162 and 164");
      }();
   };
   var decodeWUpdate = F2(function (typeStr,
   str) {
      return _U.eq(typeStr,
      "Insert") ? decodeWInsert(str) : _U.eq(typeStr,
      "Delete") ? decodeWDelete(str) : _U.eq(typeStr,
      "SiteId") ? decodeWSiteId(str) : $Model.NoUpdate;
   });
   var jsonToTUpdate = function (str) {
      return function () {
         var _v31 = A2($Json$Decode.decodeString,
         A2($Json$Decode._op[":="],
         "type",
         $Json$Decode.string),
         str);
         switch (_v31.ctor)
         {case "Err":
            return $Model.NoTUpdate;
            case "Ok":
            return A2(decodeTUpdate,
              _v31._0,
              str);}
         _U.badCase($moduleName,
         "between lines 75 and 77");
      }();
   };
   var jsonObjToWUpdate = function (str) {
      return function () {
         var _v34 = A2($Json$Decode.decodeString,
         A2($Json$Decode._op[":="],
         "type",
         $Json$Decode.string),
         str);
         switch (_v34.ctor)
         {case "Err":
            return $Model.NoUpdate;
            case "Ok":
            return A2(decodeWUpdate,
              _v34._0,
              str);}
         _U.badCase($moduleName,
         "between lines 68 and 70");
      }();
   };
   var wCharMaker = F5(function (id,
   strCh,
   vis,
   next,
   prev) {
      return {_: {}
             ,ch: toChar(strCh)
             ,id: id
             ,next: next
             ,prev: prev
             ,vis: vis};
   });
   var siteIdDecoder = A2($Json$Decode.object1,
   function (id) {
      return $Model.SiteId(id);
   },
   A2($Json$Decode._op[":="],
   "siteId",
   $Json$Decode.$int));
   var wDeleteDecoder = A6($Json$Decode.object5,
   F5(function (id,
   ch,
   vis,
   next,
   prev) {
      return $Model.Delete(A5(wCharMaker,
      id,
      ch,
      vis,
      next,
      prev));
   }),
   decodeId,
   A2($Json$Decode._op[":="],
   "ch",
   $Json$Decode.string),
   A2($Json$Decode._op[":="],
   "vis",
   $Json$Decode.$int),
   decNext,
   decPrev);
   var insertDeleteDecoder = A7($Json$Decode.object6,
   F6(function (t,
   id,
   ch,
   vis,
   next,
   prev) {
      return _U.eq(t,
      "Insert") ? $Model.Insert(A5(wCharMaker,
      id,
      ch,
      vis,
      next,
      prev)) : $Model.Delete(A5(wCharMaker,
      id,
      ch,
      vis,
      next,
      prev));
   }),
   A2($Json$Decode._op[":="],
   "type",
   $Json$Decode.string),
   decodeId,
   A2($Json$Decode._op[":="],
   "ch",
   $Json$Decode.string),
   A2($Json$Decode._op[":="],
   "vis",
   $Json$Decode.$int),
   decNext,
   decPrev);
   var wUpdateDecoder = $Json$Decode.oneOf(_L.fromArray([siteIdDecoder
                                                        ,insertDeleteDecoder]));
   var jsonToWUpdates = function (str) {
      return function () {
         var _v37 = A2($Json$Decode.decodeString,
         $Json$Decode.list(wUpdateDecoder),
         str);
         switch (_v37.ctor)
         {case "Err":
            return _L.fromArray([$Model.NoUpdate]);
            case "Ok": return _v37._0;}
         _U.badCase($moduleName,
         "between lines 60 and 62");
      }();
   };
   _elm.ConvertJson.values = {_op: _op
                             ,wUpdateDecoder: wUpdateDecoder
                             ,insertDeleteDecoder: insertDeleteDecoder
                             ,wDeleteDecoder: wDeleteDecoder
                             ,siteIdDecoder: siteIdDecoder
                             ,wCharMaker: wCharMaker
                             ,jsonToWUpdates: jsonToWUpdates
                             ,jsonObjToWUpdate: jsonObjToWUpdate
                             ,jsonToTUpdate: jsonToTUpdate
                             ,decodeId: decodeId
                             ,decVis: decVis
                             ,decNext: decNext
                             ,decPrev: decPrev
                             ,decCh: decCh
                             ,toChar: toChar
                             ,decodeTUpdate: decodeTUpdate
                             ,tInsertStringDecoder: tInsertStringDecoder
                             ,tDeleteStringDecoder: tDeleteStringDecoder
                             ,tInsertDecoder: tInsertDecoder
                             ,tDeleteDecoder: tDeleteDecoder
                             ,decCP: decCP
                             ,decodeWUpdate: decodeWUpdate
                             ,decodeWInsert: decodeWInsert
                             ,decodeWDelete: decodeWDelete
                             ,decodeWSiteId: decodeWSiteId
                             ,wCharDecoder: wCharDecoder
                             ,wSiteIdDecoder: wSiteIdDecoder
                             ,tUpdatesToJson: tUpdatesToJson
                             ,tUpdateToJson: tUpdateToJson
                             ,wUpdatesToJson: wUpdatesToJson
                             ,wUpdateToJson: wUpdateToJson
                             ,stringUpdateToJson: stringUpdateToJson
                             ,encodeWInsert: encodeWInsert
                             ,encodeStringUpdate: encodeStringUpdate
                             ,encodeWUpdate: encodeWUpdate
                             ,wCharToJsonList: wCharToJsonList
                             ,tUpToJsonList: tUpToJsonList
                             ,encodeTUpdate: encodeTUpdate};
   return _elm.ConvertJson.values;
};